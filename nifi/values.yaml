---

# image details
image:
  repository: apache/nifi
  tag: "latest"
  pullPolicy: IfNotPresent
  imagePullSecret: ""

# security context as per user in nifi image
# This sets up the os-user security context to run the docker container
securityContext:
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

# statefulset replica-count
replicaCount: 3

# headless service
headless:
  type: ClusterIP
  annotations: 
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"

# ui service
service:
  type: LoadBalancer
  port:
    http: 80
    https: 443
  annotations: {}
  sessionAffinity: "ClientIP"
  sessionAffinityTimeoutInSeconds: 60

nifi:
  # Values for bootstrap.conf
  bootstrapConf:
    jvmMinMemory: 32g
    jvmMaxMemory: 32g
    g1ReservePercent: 20
    concGcThreads: 1
    parallelGcThreads: 1
    initiatingHeapOccupancyPercent: 35
  # Values for nifi.properties
  properties:
    networkInterface:
      default: eth0
      loopback: lo
      enableServiceOnLoopback: true
    port:
      http: 8080
      https: 8443
      cluster: 8081
    provenanceImplementation: org.apache.nifi.provenance.VolatileProvenanceRepository
    # performance parameters
    protocolThreads: 5
    maxProtocolThreads: 10
    clusterTimeout: 60
    zkTimeout: 15
    webProxyHost: ""
    # security parameters
    secured: false
  tls:
    certificateSource:
      nifiToolkit: false
      userProvided: false
    dir: certificates
    caCertificate: root_ca_certificate
    adminUser:
      enabled: true
      privateKey: admin_private_key
      certificate: admin_certificate
    nodeCerts:
      - node: 1
        privateKey: node1_private_key
        certificate: node1_certificate
      - node: 2
        privateKey: node2_private_key
        certificate: node2_certificate
      - node: 3
        privateKey: node3_private_key
        certificate: node3_certificate
    userCerts:
      # - user: 1
      #   certificate: user1_certificate
      # - user: 2
      #   certificate: user2_certificate
  # authentication parameters
  authentication:
    ldap:
      enabled: false
      authenticationStrategy: "SIMPLE"
      referralStrategy: "FOLLOW"
      identityStrategy: "USE_USERNAME"
      url: ""
      managerDn: ""
      managerPassword: ""
      connectTimeout: "10 secs"
      readTimeout: "10 secs"
      userSearchBase: ""
      userSearchFilter: ""
      expirationPeriod: "12 hours"
    openid:
      enabled: false
      discoveryUrl: ""
      clientId: ""
      clientSecret: ""
      additionalScopes: "profile"
      preferredJwsAlgorithm: ""
      claimIdentityingUser: ""
  authorization:
    adminUser:
      enabled: true
      name: "CN=admin"
    ldap:
      enforceCaseSensitivity: "false"
      syncInterval: "30 mins"
      pageSize: ""
      userObjectClass: ""
      userSearchScope: "ONE_LEVEL"
      userSearchFilter: ""
      userIdentityAttribute: "cn"
      userGroupNameAttribute: ""
      userReferencedGroupAttribute: ""
      groupSearchBase: ""
      groupObjectClass: ""
      groupSearchScope: "ONE_LEVEL"
      groupSearchFilter: ""
      groupNameAttribute: "cn"
      groupMemberAttribute: ""
      groupReferencedUserAttribute: ""

# pvc details
persistence:
  storageClass: default
  accessModes:  [ReadWriteOnce]
  configPartitionSize: 100Mi
  dataPartition1Size: 500Gi
  dataPartition2Size: 500Gi
  dataPartition3Size: 500Gi
  logPartitionSize: 5Gi

# Configure resource requests for nifi pods
resources:
  requests:
    memory: "50Gi"
    cpu: "0.9"

# Parameters for logging containers running in statefulset
logContainers:
  enabled: true
  image:
    repository: alpine
    pullPolicy: IfNotPresent
    tag: latest
  resources:
    requests:
      cpu: 10m
      memory: 10Mi
    limits:
      cpu: 50m
      memory: 50Mi

# nodeselector
nodeSelector: {}

# zookeeper details
zookeeper:
  enabled: true
  server: ""
  port: 2181
  image:
    repository: zookeeper
    pullPolicy: IfNotPresent
    tag: latest

# One can include additional libraries in the Nifi containers by using the postStart handler
# postStart is essentially a shell command one can execute on the pods coming up
# postStart: wget -P /opt/nifi/extensions/my.nar https://myLocation/my.nar

# ca server details
# Setting this true would create a nifi-toolkit based ca server
# The ca server will be used to generate self-signed certificates required setting up secured cluster
ca:
  server: ""
  port: 9090
  # TODO: token should be randomly generated randomly via secret
  token: sixteenCharacters
  image:
    repository: apache/nifi-toolkit
    pullPolicy: IfNotPresent
    tag: "latest"
    imagePullSecret: ""
