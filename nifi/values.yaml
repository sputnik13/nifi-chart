---

# image details
image:
  repository: apache/nifi
  tag: "1.11.4"
  pullPolicy: IfNotPresent

# security context as per user in nifi image
# This sets up the os-user security context to run the docker container
securityContext:
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

# statefulset replica-count
replicaCount: 3

# headless service
headless:
  type: ClusterIP
  annotations: 
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"

# ui service
service:
  type: LoadBalancer
  port:
    http: 80
    https: 443
  annotations: {}
  sessionAffinity: "ClientIP"
  sessionAffinityTimeoutInSeconds: 60

nifi:
  # Values for bootstrap.conf
  bootstrap_conf:
    jvmMemory: 32g
    g1ReservePercent: 20
    concGcThreads: 1
    parallelGcThreads: 1
    initiatingHeapOccupancyPercent: 35
  # Values for nifi.properties
  properties:
    network_interface:
      default: eth0
      loopback: lo
      enable_service_on_loopback: true
    port:
      http: 8080
      https: 8443
      cluster: 8081
    provenance_implementation: org.apache.nifi.provenance.VolatileProvenanceRepository
    # performance parameters
    protocol_threads: 5
    max_protocol_threads: 10
    cluster_timeout: 60
    zk_timeout: 15
    webProxyHost: ""
    # security parameters
    secured: false
  certificate_source:
    nifi_toolkit: false
    user_provided: false
  # authentication parameters
  authentication:
    ldap:
      enabled: false
      authentication_strategy: "SIMPLE"
      referral_strategy: "FOLLOW"
      identity_strategy: "USE_USERNAME"
      url: ""
      manager_dn: ""
      manager_password: ""
      connect_timeout: "10 secs"
      read_timeout: "10 secs"
      user_search_base: ""
      user_search_filter: ""
      expiration_period: "12 hours"
    openid:
      enabled: false
      discovery_url: ""
      client_id: ""
      client_secret: ""
      additional_scopes: "profile"
      preferred_jws_algorithm: ""
      claim_identitying_user: ""
  authorization:
    ldap:
      admin_user_cn: ""
      enforce_case_sensitivity: "false"
      sync_interval: "30 mins"
      page_size: ""
      user_object_class: ""
      user_search_scope: "ONE_LEVEL"
      user_search_filter: ""
      user_identity_attribute: "cn"
      user_group_name_attribute: ""
      user_referenced_group_attribute: ""
      group_search_base: ""
      group_object_class: ""
      group_search_scope: "ONE_LEVEL"
      group_search_filter: ""
      group_name_attribute: "cn"
      group_member_attribute: ""
      group_referenced_user_attribute: ""
    openid:
      admin_user: ""

# pvc details
persistence:
  storageClass: default
  accessModes:  [ReadWriteOnce]
  configPartitionSize: 100Mi
  dataPartition1Size: 500Gi
  dataPartition2Size: 500Gi
  dataPartition3Size: 500Gi
  logPartitionSize: 5Gi

# Configure resource requests for nifi pods
resources:
  requests:
    memory: "50Gi"
    cpu: "0.9"

# Parameters for logging containers running in statefulset
logContainers:
  enabled: true
  image:
    repository: alpine
    pullPolicy: IfNotPresent
    tag: latest
  resources:
    requests:
      cpu: 10m
      memory: 10Mi
    limits:
      cpu: 50m
      memory: 50Mi

# nodeselector
nodeSelector: {}

# zookeeper details
zookeeper:
  enabled: true
  server: ""
  port: 2181
  image:
    repository: zookeeper
    pullPolicy: IfNotPresent
    tag: latest

# One can include additional libraries in the Nifi containers by using the postStart handler
# postStart is essentially a shell command one can execute on the pods coming up
# postStart: wget -P /opt/nifi/extensions/my.nar https://myLocation/my.nar

# ca server details
# Setting this true would create a nifi-toolkit based ca server
# The ca server will be used to generate self-signed certificates required setting up secured cluster
ca:
  server: ""
  port: 9090
  # TODO: token should be randomly generated randomly via secret
  token: sixteenCharacters
  admin:
    cn: admin
  image:
    repository: apache/nifi-toolkit
    pullPolicy: IfNotPresent
    tag: "1.11.4"

certs:
  name: ""
  ca_certificate: root_ca_certificate
  admin_user:
    enabled: true
    cn: "CN=admin"
    private_key: admin_private_key
    certificate: admin_certificate
  node_certs:
    - node: 1
      private_key: node1_private_key
      certificate: node1_certificate
    - node: 2
      private_key: node2_private_key
      certificate: node2_certificate
    - node: 3
      private_key: node3_private_key
      certificate: node3_certificate
